# Generated by Django 5.2.5 on 2025-09-05 18:51

import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("trading_strategies", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="tradingstrategy",
            name="strategy_type",
            field=models.CharField(
                choices=[
                    ("flipping", "Flipping"),
                    ("decanting", "Decanting"),
                    ("set_combining", "Set Combining"),
                    ("crafting", "Crafting"),
                    ("arbitrage", "Arbitrage"),
                    ("high_alchemy", "High Alchemy"),
                    ("bond_flipping", "Bond Flipping"),
                    ("rune_magic", "Rune & Magic"),
                ],
                help_text="Type of trading strategy",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="MoneyMakerStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "starting_capital",
                    models.BigIntegerField(help_text="Starting capital in GP"),
                ),
                (
                    "current_capital",
                    models.BigIntegerField(help_text="Current capital in GP"),
                ),
                (
                    "target_capital",
                    models.BigIntegerField(help_text="Target capital goal in GP"),
                ),
                (
                    "hourly_profit_gp",
                    models.BigIntegerField(
                        default=0, help_text="Average profit per hour in GP"
                    ),
                ),
                (
                    "hourly_profit_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When hourly profit was last calculated",
                    ),
                ),
                (
                    "optimal_trading_hours",
                    models.JSONField(
                        default=list,
                        help_text="Best hours to execute this strategy (0-23)",
                    ),
                ),
                (
                    "update_frequency_minutes",
                    models.IntegerField(
                        default=60, help_text="How often to recalculate opportunities"
                    ),
                ),
                (
                    "scales_with_capital",
                    models.BooleanField(
                        default=True,
                        help_text="Whether profits scale with increased capital",
                    ),
                ),
                (
                    "capital_efficiency_multiplier",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0"),
                        help_text="How efficiently capital is used (1.0 = 100% efficiency)",
                        max_digits=6,
                    ),
                ),
                (
                    "max_capital_per_trade",
                    models.BigIntegerField(
                        help_text="Maximum capital to risk per single trade"
                    ),
                ),
                (
                    "stop_loss_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Stop loss threshold as percentage",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "success_rate_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.0"),
                        help_text="Historical success rate",
                        max_digits=5,
                    ),
                ),
                ("total_trades_executed", models.IntegerField(default=0)),
                ("total_profit_realized", models.BigIntegerField(default=0)),
                (
                    "exploits_lazy_tax",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this strategy exploits player laziness",
                    ),
                ),
                (
                    "lazy_tax_premium_pct",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Premium percentage players pay for convenience",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "strategy",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="money_maker_strategy",
                        to="trading_strategies.tradingstrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Money Maker Strategy",
                "verbose_name_plural": "Money Maker Strategies",
            },
        ),
        migrations.CreateModel(
            name="EnhancedSetCombiningStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_sets",
                    models.JSONField(
                        help_text="Dict of set_id: {pieces: [item_ids], set_name: str}"
                    ),
                ),
                (
                    "set_opportunities",
                    models.JSONField(
                        default=dict,
                        help_text="Current profit opportunities for each set",
                    ),
                ),
                (
                    "average_lazy_tax_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.0"),
                        help_text="Average lazy tax across all sets",
                        max_digits=5,
                    ),
                ),
                (
                    "high_lazy_tax_sets",
                    models.JSONField(
                        default=list,
                        help_text="Sets with exceptionally high lazy tax premiums",
                    ),
                ),
                (
                    "optimal_buying_times",
                    models.JSONField(
                        default=list, help_text="Best times to buy individual pieces"
                    ),
                ),
                (
                    "optimal_selling_times",
                    models.JSONField(
                        default=list, help_text="Best times to sell complete sets"
                    ),
                ),
                (
                    "max_sets_held_simultaneously",
                    models.IntegerField(
                        default=5, help_text="Maximum number of incomplete sets to hold"
                    ),
                ),
                (
                    "piece_acquisition_timeout_hours",
                    models.IntegerField(
                        default=48, help_text="Max time to spend acquiring all pieces"
                    ),
                ),
                (
                    "set_competition_levels",
                    models.JSONField(
                        default=dict,
                        help_text="Competition level for each set (low/medium/high)",
                    ),
                ),
                (
                    "recommended_daily_sets",
                    models.JSONField(
                        default=dict,
                        help_text="Recommended number of each set to complete daily",
                    ),
                ),
                ("total_sets_completed", models.IntegerField(default=0)),
                ("total_set_profit", models.BigIntegerField(default=0)),
                ("incomplete_sets_value", models.BigIntegerField(default=0)),
                (
                    "money_maker",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enhanced_set_combining",
                        to="trading_strategies.moneymakerstrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Enhanced Set Combining Strategy",
            },
        ),
        migrations.CreateModel(
            name="BondFlippingStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_item_ids",
                    models.JSONField(help_text="List of high-value item IDs to flip"),
                ),
                (
                    "target_item_data",
                    models.JSONField(
                        default=dict,
                        help_text="Detailed data about target items with prices and margins",
                    ),
                ),
                (
                    "bond_price_gp",
                    models.IntegerField(
                        help_text="Current Old School Bond price in GP"
                    ),
                ),
                (
                    "bond_to_gp_rate",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="GP per dollar spent on bonds",
                        max_digits=10,
                    ),
                ),
                (
                    "min_margin_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("5.0"),
                        help_text="Minimum profit margin to consider",
                        max_digits=5,
                    ),
                ),
                (
                    "max_hold_time_hours",
                    models.IntegerField(
                        default=24,
                        help_text="Maximum time to hold an item before cutting losses",
                    ),
                ),
                (
                    "price_check_frequency_minutes",
                    models.IntegerField(
                        default=5,
                        help_text="How often to check prices for flip opportunities",
                    ),
                ),
                (
                    "last_opportunity_scan",
                    models.DateTimeField(
                        blank=True,
                        help_text="When we last scanned for opportunities",
                        null=True,
                    ),
                ),
                (
                    "money_maker",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bond_flipping",
                        to="trading_strategies.moneymakerstrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Bond Flipping Strategy",
            },
        ),
        migrations.CreateModel(
            name="AdvancedDecantingStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_potions",
                    models.JSONField(
                        help_text="Dict of potion_id: {doses: [4,3,2,1], base_name: str}"
                    ),
                ),
                (
                    "potion_profits",
                    models.JSONField(
                        default=dict,
                        help_text="Current profit margins for each potion/dose combination",
                    ),
                ),
                (
                    "min_profit_per_dose_gp",
                    models.IntegerField(
                        default=100,
                        help_text="Minimum profit per dose to consider worthwhile",
                    ),
                ),
                (
                    "optimal_dose_combinations",
                    models.JSONField(
                        default=list,
                        help_text="Most profitable dose combinations [(from_dose, to_dose, profit)]",
                    ),
                ),
                (
                    "daily_volume_targets",
                    models.JSONField(
                        default=dict,
                        help_text="Target daily volumes for each potion type",
                    ),
                ),
                (
                    "market_liquidity_scores",
                    models.JSONField(
                        default=dict,
                        help_text="Liquidity scores for each potion (0-100)",
                    ),
                ),
                (
                    "barbarian_herblore_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether Barbarian Herblore is required for this strategy",
                    ),
                ),
                (
                    "decanting_speed_per_hour",
                    models.IntegerField(
                        default=1000,
                        help_text="Estimated potions that can be decanted per hour",
                    ),
                ),
                ("total_potions_decanted", models.IntegerField(default=0)),
                ("total_decanting_profit", models.BigIntegerField(default=0)),
                (
                    "money_maker",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="advanced_decanting",
                        to="trading_strategies.moneymakerstrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Advanced Decanting Strategy",
            },
        ),
        migrations.CreateModel(
            name="RuneMagicStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_runes",
                    models.JSONField(
                        help_text="List of profitable rune types and their margins"
                    ),
                ),
                (
                    "magic_supplies",
                    models.JSONField(
                        help_text="Magic-related supplies with profit opportunities"
                    ),
                ),
                (
                    "runecrafting_level_required",
                    models.IntegerField(
                        default=1, help_text="Minimum Runecrafting level required"
                    ),
                ),
                (
                    "runes_per_hour",
                    models.IntegerField(
                        default=0, help_text="Estimated runes craftable per hour"
                    ),
                ),
                (
                    "essence_costs",
                    models.JSONField(
                        default=dict,
                        help_text="Current costs for different essence types",
                    ),
                ),
                (
                    "magic_training_items",
                    models.JSONField(
                        default=list,
                        help_text="Items profitable for magic training arbitrage",
                    ),
                ),
                (
                    "high_alch_opportunities",
                    models.JSONField(
                        default=list, help_text="Current high alchemy opportunities"
                    ),
                ),
                (
                    "money_maker",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rune_magic",
                        to="trading_strategies.moneymakerstrategy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rune & Magic Strategy",
            },
        ),
        migrations.AddIndex(
            model_name="moneymakerstrategy",
            index=models.Index(
                fields=["-hourly_profit_gp"], name="trading_str_hourly__d8e682_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="moneymakerstrategy",
            index=models.Index(
                fields=["starting_capital", "target_capital"],
                name="trading_str_startin_749cd4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="moneymakerstrategy",
            index=models.Index(
                fields=["success_rate_percentage"],
                name="trading_str_success_bc01e1_idx",
            ),
        ),
    ]
