# Generated by Django 5.2.5 on 2025-09-05 01:17

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="MarketConditionSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "market_condition",
                    models.CharField(
                        choices=[
                            ("stable", "Stable"),
                            ("volatile", "Volatile"),
                            ("crashing", "Crashing"),
                            ("recovering", "Recovering"),
                            ("bullish", "Bullish"),
                            ("bearish", "Bearish"),
                        ],
                        max_length=20,
                    ),
                ),
                ("total_volume_24h", models.BigIntegerField(default=0)),
                (
                    "average_price_change_pct",
                    models.DecimalField(decimal_places=4, max_digits=8),
                ),
                (
                    "volatility_score",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                (
                    "bot_activity_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Estimated bot activity level (0-1)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                (
                    "crash_risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="low",
                        max_length=10,
                    ),
                ),
                (
                    "market_data",
                    models.JSONField(
                        default=dict, help_text="Additional market analysis data"
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["timestamp"], name="trading_str_timesta_92b80a_idx"
                    ),
                    models.Index(
                        fields=["market_condition"],
                        name="trading_str_market__eecf92_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TradingStrategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("flipping", "Flipping"),
                            ("decanting", "Decanting"),
                            ("set_combining", "Set Combining"),
                            ("crafting", "Crafting"),
                            ("arbitrage", "Arbitrage"),
                        ],
                        help_text="Type of trading strategy",
                        max_length=20,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable name for the strategy", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of how the strategy works"
                    ),
                ),
                (
                    "potential_profit_gp",
                    models.BigIntegerField(
                        help_text="Potential profit in GP per transaction"
                    ),
                ),
                (
                    "profit_margin_pct",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Profit margin as percentage",
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(
                                Decimal("999.9999")
                            ),
                        ],
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("extreme", "Extreme"),
                        ],
                        default="medium",
                        help_text="Risk level of the strategy",
                        max_length=10,
                    ),
                ),
                (
                    "min_capital_required",
                    models.BigIntegerField(help_text="Minimum capital required in GP"),
                ),
                (
                    "recommended_capital",
                    models.BigIntegerField(
                        help_text="Recommended capital for optimal returns"
                    ),
                ),
                (
                    "optimal_market_condition",
                    models.CharField(
                        choices=[
                            ("stable", "Stable"),
                            ("volatile", "Volatile"),
                            ("crashing", "Crashing"),
                            ("recovering", "Recovering"),
                            ("bullish", "Bullish"),
                            ("bearish", "Bearish"),
                        ],
                        help_text="Best market condition for this strategy",
                        max_length=20,
                    ),
                ),
                (
                    "estimated_time_minutes",
                    models.IntegerField(
                        help_text="Estimated time to complete one cycle in minutes"
                    ),
                ),
                (
                    "max_volume_per_day",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum recommended volume per day",
                        null=True,
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Confidence score from 0.0 to 1.0",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this strategy is currently viable",
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "strategy_data",
                    models.JSONField(
                        default=dict, help_text="Strategy-specific data and parameters"
                    ),
                ),
            ],
            options={
                "verbose_name": "Trading Strategy",
                "verbose_name_plural": "Trading Strategies",
                "ordering": ["-potential_profit_gp", "-confidence_score"],
                "indexes": [
                    models.Index(
                        fields=["strategy_type", "is_active"],
                        name="trading_str_strateg_1ca6cd_idx",
                    ),
                    models.Index(
                        fields=["profit_margin_pct"],
                        name="trading_str_profit__dc4059_idx",
                    ),
                    models.Index(
                        fields=["risk_level"], name="trading_str_risk_le_938d23_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StrategyPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("actual_profit_gp", models.BigIntegerField()),
                ("expected_profit_gp", models.BigIntegerField()),
                (
                    "accuracy_score",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                ("capital_used", models.BigIntegerField()),
                ("execution_time_minutes", models.IntegerField()),
                ("successful_trades", models.IntegerField(default=0)),
                ("failed_trades", models.IntegerField(default=0)),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="performance_records",
                        to="trading_strategies.tradingstrategy",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["strategy", "timestamp"],
                        name="trading_str_strateg_ec06f6_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="SetCombiningOpportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("set_name", models.CharField(max_length=100)),
                ("set_item_id", models.IntegerField(help_text="Complete set item ID")),
                (
                    "piece_ids",
                    models.JSONField(help_text="List of individual piece item IDs"),
                ),
                (
                    "piece_names",
                    models.JSONField(help_text="List of individual piece names"),
                ),
                (
                    "individual_pieces_total_cost",
                    models.IntegerField(
                        help_text="Total cost of buying all pieces individually"
                    ),
                ),
                (
                    "complete_set_price",
                    models.IntegerField(help_text="Price of the complete set"),
                ),
                (
                    "lazy_tax_profit",
                    models.IntegerField(
                        help_text="Profit from player convenience (lazy tax)"
                    ),
                ),
                (
                    "piece_volumes",
                    models.JSONField(
                        default=dict, help_text="Volume data for individual pieces"
                    ),
                ),
                ("set_volume", models.IntegerField(default=0)),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="set_combining_opportunities",
                        to="trading_strategies.tradingstrategy",
                    ),
                ),
            ],
            options={
                "ordering": ["-lazy_tax_profit"],
                "unique_together": {("set_item_id",)},
            },
        ),
        migrations.CreateModel(
            name="FlippingOpportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("item_id", models.IntegerField()),
                ("item_name", models.CharField(max_length=100)),
                ("buy_price", models.IntegerField()),
                ("sell_price", models.IntegerField()),
                ("margin", models.IntegerField()),
                (
                    "margin_percentage",
                    models.DecimalField(decimal_places=4, max_digits=8),
                ),
                ("buy_volume", models.IntegerField(default=0)),
                ("sell_volume", models.IntegerField(default=0)),
                (
                    "price_stability",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Price stability score (0-1)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("1")),
                        ],
                    ),
                ),
                ("estimated_flip_time_minutes", models.IntegerField(default=30)),
                ("recommended_quantity", models.IntegerField(default=1)),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flipping_opportunities",
                        to="trading_strategies.tradingstrategy",
                    ),
                ),
            ],
            options={
                "ordering": ["-margin_percentage", "-margin"],
                "unique_together": {("item_id",)},
            },
        ),
        migrations.CreateModel(
            name="DecantingOpportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("item_id", models.IntegerField(help_text="Item ID of the potion")),
                ("item_name", models.CharField(max_length=100)),
                (
                    "from_dose",
                    models.IntegerField(help_text="Original dose count (e.g., 4)"),
                ),
                (
                    "to_dose",
                    models.IntegerField(help_text="Target dose count (e.g., 3)"),
                ),
                (
                    "from_dose_price",
                    models.IntegerField(help_text="Price of original dose potion"),
                ),
                (
                    "to_dose_price",
                    models.IntegerField(help_text="Price of target dose potion"),
                ),
                ("from_dose_volume", models.IntegerField(default=0)),
                ("to_dose_volume", models.IntegerField(default=0)),
                (
                    "profit_per_conversion",
                    models.IntegerField(help_text="Profit per conversion"),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="decanting_opportunities",
                        to="trading_strategies.tradingstrategy",
                    ),
                ),
            ],
            options={
                "ordering": ["-profit_per_conversion"],
                "unique_together": {("item_id", "from_dose", "to_dose")},
            },
        ),
        migrations.CreateModel(
            name="CraftingOpportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("product_id", models.IntegerField()),
                ("product_name", models.CharField(max_length=100)),
                ("product_price", models.IntegerField()),
                ("materials_cost", models.IntegerField()),
                (
                    "materials_data",
                    models.JSONField(
                        help_text="List of materials with IDs, names, quantities, and prices"
                    ),
                ),
                ("required_skill_level", models.IntegerField(default=1)),
                ("skill_name", models.CharField(max_length=50)),
                ("profit_per_craft", models.IntegerField()),
                (
                    "profit_margin_pct",
                    models.DecimalField(decimal_places=4, max_digits=8),
                ),
                ("crafting_time_seconds", models.IntegerField(default=60)),
                ("max_crafts_per_hour", models.IntegerField(default=60)),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crafting_opportunities",
                        to="trading_strategies.tradingstrategy",
                    ),
                ),
            ],
            options={
                "ordering": ["-profit_per_craft"],
                "unique_together": {("product_id",)},
            },
        ),
    ]
