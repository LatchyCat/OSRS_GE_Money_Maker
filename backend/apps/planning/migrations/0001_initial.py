# Generated by Django 5.0.14 on 2025-08-28 19:09

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("items", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="GoalPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "plan_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "session_key",
                    models.CharField(
                        db_index=True,
                        help_text="Session key for anonymous users",
                        max_length=40,
                    ),
                ),
                (
                    "current_gp",
                    models.BigIntegerField(
                        help_text="Current GP amount user has",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "goal_gp",
                    models.BigIntegerField(
                        help_text="Target GP amount user wants to reach",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "required_profit",
                    models.BigIntegerField(
                        help_text="Calculated profit needed (goal_gp - current_gp)"
                    ),
                ),
                (
                    "preferred_timeframe_days",
                    models.IntegerField(
                        blank=True,
                        help_text="User's preferred timeframe in days",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "risk_tolerance",
                    models.CharField(
                        choices=[
                            ("conservative", "Conservative"),
                            ("moderate", "Moderate"),
                            ("aggressive", "Aggressive"),
                        ],
                        default="moderate",
                        help_text="User's risk tolerance level",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_achievable",
                    models.BooleanField(
                        default=True,
                        help_text="Whether goal is mathematically achievable",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_calculated", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "goal_plans",
                "indexes": [
                    models.Index(
                        fields=["session_key", "-created_at"],
                        name="goal_plans_session_ac1fad_idx",
                    ),
                    models.Index(
                        fields=["plan_id"], name="goal_plans_plan_id_091633_idx"
                    ),
                    models.Index(
                        fields=["is_active", "-created_at"],
                        name="goal_plans_is_acti_f54a64_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Strategy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Human-readable strategy name", max_length=100
                    ),
                ),
                (
                    "strategy_type",
                    models.CharField(
                        choices=[
                            ("max_profit", "Maximum Profit"),
                            ("time_optimal", "Time Optimal"),
                            ("balanced", "Balanced Risk/Reward"),
                            ("conservative", "Conservative"),
                            ("portfolio", "Multi-Item Portfolio"),
                        ],
                        help_text="Type of strategy",
                        max_length=50,
                    ),
                ),
                (
                    "estimated_days",
                    models.FloatField(help_text="Estimated days to complete"),
                ),
                (
                    "estimated_profit",
                    models.BigIntegerField(help_text="Expected total profit"),
                ),
                (
                    "required_initial_investment",
                    models.BigIntegerField(
                        help_text="GP needed to start this strategy"
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "feasibility_score",
                    models.FloatField(
                        help_text="Feasibility score from 0 (impossible) to 1 (highly feasible)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "ge_limit_constrained",
                    models.BooleanField(
                        default=False,
                        help_text="Whether strategy is limited by GE buy limits",
                    ),
                ),
                (
                    "volume_risk",
                    models.FloatField(
                        default=0.0,
                        help_text="Risk score based on market volume (0=safe, 1=risky)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "ai_confidence",
                    models.FloatField(
                        blank=True,
                        help_text="AI confidence in this strategy",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "ai_reasoning",
                    models.TextField(blank=True, help_text="AI-generated reasoning"),
                ),
                (
                    "is_recommended",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the recommended strategy",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "goal_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategies",
                        to="planning.goalplan",
                    ),
                ),
            ],
            options={
                "db_table": "strategies",
            },
        ),
        migrations.CreateModel(
            name="ProgressUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_gp_at_time",
                    models.BigIntegerField(help_text="User's GP at this point in time"),
                ),
                (
                    "profit_made",
                    models.BigIntegerField(
                        default=0, help_text="Profit made since goal started"
                    ),
                ),
                (
                    "remaining_profit_needed",
                    models.BigIntegerField(
                        help_text="Profit still needed to reach goal"
                    ),
                ),
                (
                    "completion_percentage",
                    models.FloatField(
                        help_text="Percentage of goal completed",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "days_elapsed",
                    models.FloatField(help_text="Days since goal was created"),
                ),
                (
                    "estimated_days_remaining",
                    models.FloatField(
                        blank=True, help_text="Estimated days to completion", null=True
                    ),
                ),
                (
                    "market_notes",
                    models.TextField(
                        blank=True, help_text="Notes about market conditions"
                    ),
                ),
                (
                    "is_on_track",
                    models.BooleanField(
                        default=True, help_text="Whether user is on track to meet goal"
                    ),
                ),
                (
                    "needs_strategy_update",
                    models.BooleanField(
                        default=False, help_text="Whether strategy needs updating"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "goal_plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_updates",
                        to="planning.goalplan",
                    ),
                ),
                (
                    "active_strategy",
                    models.ForeignKey(
                        blank=True,
                        help_text="Strategy user was following at this time",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="planning.strategy",
                    ),
                ),
            ],
            options={
                "db_table": "progress_updates",
            },
        ),
        migrations.CreateModel(
            name="StrategyItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "allocation_percentage",
                    models.FloatField(
                        help_text="Percentage of strategy allocated to this item",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "items_to_buy",
                    models.IntegerField(
                        help_text="Number of items to purchase",
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "buy_price_when_calculated",
                    models.IntegerField(
                        help_text="GE buy price when strategy was created"
                    ),
                ),
                (
                    "profit_per_item",
                    models.IntegerField(help_text="Profit per item when high alched"),
                ),
                (
                    "total_cost",
                    models.BigIntegerField(help_text="Total cost to buy all items"),
                ),
                (
                    "expected_profit",
                    models.BigIntegerField(
                        help_text="Expected profit from this item allocation"
                    ),
                ),
                (
                    "ge_limit",
                    models.IntegerField(help_text="GE 4-hour buy limit for this item"),
                ),
                (
                    "estimated_buy_time_hours",
                    models.FloatField(
                        help_text="Time needed to buy all items (considering GE limits)"
                    ),
                ),
                (
                    "daily_volume",
                    models.IntegerField(
                        default=0, help_text="Daily trading volume when calculated"
                    ),
                ),
                (
                    "price_volatility",
                    models.FloatField(
                        default=0.0,
                        help_text="Price volatility risk (0=stable, 1=very volatile)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "volume_risk",
                    models.FloatField(
                        default=0.0,
                        help_text="Volume/liquidity risk (0=safe, 1=risky)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the main item in the strategy",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strategy_items",
                        to="items.item",
                    ),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="planning.strategy",
                    ),
                ),
            ],
            options={
                "db_table": "strategy_items",
            },
        ),
        migrations.CreateModel(
            name="StrategyRevision",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "revision_reason",
                    models.CharField(
                        choices=[
                            ("price_change", "Price Change"),
                            ("market_shift", "Market Shift"),
                            ("ge_limit_reached", "GE Limit Reached"),
                            ("user_request", "User Request"),
                            ("ai_recommendation", "AI Recommendation"),
                            ("performance_poor", "Poor Performance"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "changes_summary",
                    models.TextField(help_text="Summary of changes made"),
                ),
                (
                    "impact_description",
                    models.TextField(help_text="Expected impact of changes"),
                ),
                ("old_estimated_days", models.FloatField()),
                ("new_estimated_days", models.FloatField()),
                ("old_feasibility_score", models.FloatField()),
                ("new_feasibility_score", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "original_strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revisions",
                        to="planning.strategy",
                    ),
                ),
            ],
            options={
                "db_table": "strategy_revisions",
            },
        ),
        migrations.AddIndex(
            model_name="strategy",
            index=models.Index(
                fields=["goal_plan", "-feasibility_score"],
                name="strategies_goal_pl_9d69b2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="strategy",
            index=models.Index(
                fields=["strategy_type"], name="strategies_strateg_f57f49_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="strategy",
            index=models.Index(
                fields=["is_recommended", "-feasibility_score"],
                name="strategies_is_reco_85ef3b_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="strategy",
            unique_together={("goal_plan", "strategy_type")},
        ),
        migrations.AddIndex(
            model_name="progressupdate",
            index=models.Index(
                fields=["goal_plan", "-created_at"],
                name="progress_up_goal_pl_3d6b40_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="progressupdate",
            index=models.Index(
                fields=["-created_at"], name="progress_up_created_5bb04a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="strategyitem",
            index=models.Index(
                fields=["strategy", "-allocation_percentage"],
                name="strategy_it_strateg_19a016_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="strategyitem",
            index=models.Index(
                fields=["item", "-expected_profit"],
                name="strategy_it_item_id_9af4fe_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="strategyitem",
            index=models.Index(
                fields=["is_primary"], name="strategy_it_is_prim_d81680_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="strategyitem",
            unique_together={("strategy", "item")},
        ),
        migrations.AddIndex(
            model_name="strategyrevision",
            index=models.Index(
                fields=["original_strategy", "-created_at"],
                name="strategy_re_origina_7f6fb8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="strategyrevision",
            index=models.Index(
                fields=["revision_reason", "-created_at"],
                name="strategy_re_revisio_7ef220_idx",
            ),
        ),
    ]
