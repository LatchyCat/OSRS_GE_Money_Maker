# Generated by Django 5.0.14 on 2025-08-28 19:09

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("items", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="FaissIndex",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("model_name", models.CharField(max_length=100)),
                ("model_version", models.CharField(max_length=50)),
                ("dimension", models.IntegerField(help_text="Vector dimension")),
                (
                    "index_type",
                    models.CharField(
                        help_text="FAISS index type (e.g., IndexFlatIP)", max_length=50
                    ),
                ),
                ("num_vectors", models.IntegerField(default=0)),
                (
                    "index_file_path",
                    models.CharField(
                        help_text="Path to FAISS index file", max_length=500
                    ),
                ),
                (
                    "metadata_file_path",
                    models.CharField(
                        help_text="Path to metadata JSON file", max_length=500
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_rebuilt", models.DateTimeField(auto_now_add=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "faiss_indices",
                "indexes": [
                    models.Index(
                        fields=["is_active", "model_name"],
                        name="faiss_indic_is_acti_ca595c_idx",
                    ),
                    models.Index(
                        fields=["-last_rebuilt"], name="faiss_indic_last_re_580680_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("query_text", models.TextField(db_index=True)),
                (
                    "query_hash",
                    models.CharField(
                        help_text="SHA256 hash of query", max_length=64, unique=True
                    ),
                ),
                (
                    "vector",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        help_text="Vector embedding of search query",
                        size=1024,
                    ),
                ),
                (
                    "search_count",
                    models.IntegerField(
                        default=1, help_text="Number of times this query was searched"
                    ),
                ),
                ("last_searched", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "result_count",
                    models.IntegerField(
                        default=0, help_text="Number of results returned"
                    ),
                ),
            ],
            options={
                "db_table": "search_queries",
                "indexes": [
                    models.Index(
                        fields=["query_hash"], name="search_quer_query_h_45d1f4_idx"
                    ),
                    models.Index(
                        fields=["-search_count"], name="search_quer_search__0f5528_idx"
                    ),
                    models.Index(
                        fields=["-last_searched"], name="search_quer_last_se_22d6db_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ItemEmbedding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vector",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        help_text="Vector embedding of item name + examine text",
                        size=1024,
                    ),
                ),
                (
                    "model_name",
                    models.CharField(default="snowflake-arctic-embed2", max_length=100),
                ),
                ("model_version", models.CharField(default="latest", max_length=50)),
                ("source_text", models.TextField(help_text="Text that was embedded")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="embedding",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "item_embeddings",
                "indexes": [
                    models.Index(
                        fields=["model_name", "model_version"],
                        name="item_embedd_model_n_07d468_idx",
                    ),
                    models.Index(
                        fields=["updated_at"], name="item_embedd_updated_4ed664_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SimilarityCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(help_text="Cosine similarity score (0-1)"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item_a",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="similarity_a",
                        to="items.item",
                    ),
                ),
                (
                    "item_b",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="similarity_b",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "similarity_cache",
                "indexes": [
                    models.Index(
                        fields=["item_a", "-similarity_score"],
                        name="similarity__item_a__af46a8_idx",
                    ),
                    models.Index(
                        fields=["item_b", "-similarity_score"],
                        name="similarity__item_b__51000d_idx",
                    ),
                    models.Index(
                        fields=["-similarity_score"],
                        name="similarity__similar_3b7ef5_idx",
                    ),
                ],
                "unique_together": {("item_a", "item_b")},
            },
        ),
    ]
