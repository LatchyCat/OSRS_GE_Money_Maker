# Generated by Django 5.2.5 on 2025-09-04 21:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0001_initial"),
        (
            "realtime_engine",
            "0006_technicalanalysis_technicalindicator_technicalsignal_and_more",
        ),
    ]

    operations = [
        migrations.CreateModel(
            name="SeasonalEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_name",
                    models.CharField(
                        help_text="Name or identifier for the event", max_length=100
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("osrs_official", "Official OSRS Event"),
                            ("community", "Community Event"),
                            ("detected_anomaly", "Detected Market Anomaly"),
                            ("holiday", "Holiday Effect"),
                            ("update", "Game Update"),
                            ("seasonal", "Seasonal Pattern"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, help_text="Event start date", null=True
                    ),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, help_text="Event end date", null=True),
                ),
                (
                    "duration_days",
                    models.IntegerField(default=1, help_text="Event duration in days"),
                ),
                ("is_recurring", models.BooleanField(default=False)),
                (
                    "recurrence_pattern",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                            ("yearly", "Yearly"),
                            ("irregular", "Irregular"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "affected_categories",
                    models.JSONField(
                        default=list, help_text="Item categories affected by event"
                    ),
                ),
                (
                    "average_price_impact_pct",
                    models.FloatField(
                        default=0, help_text="Average price impact percentage"
                    ),
                ),
                (
                    "average_volume_impact_pct",
                    models.FloatField(
                        default=0, help_text="Average volume impact percentage"
                    ),
                ),
                (
                    "impact_confidence",
                    models.FloatField(
                        default=0.5, help_text="Confidence in impact estimates"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Event description"),
                ),
                (
                    "historical_occurrences",
                    models.JSONField(
                        default=list, help_text="Historical dates when event occurred"
                    ),
                ),
                (
                    "detection_method",
                    models.CharField(
                        default="manual",
                        help_text="How event was detected/defined",
                        max_length=50,
                    ),
                ),
                ("detection_timestamp", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether to use this event for predictions",
                    ),
                ),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("unverified", "Unverified"),
                            ("verified", "Verified"),
                            ("false_positive", "False Positive"),
                        ],
                        default="unverified",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "db_table": "seasonal_events",
                "ordering": ["-detection_timestamp"],
                "indexes": [
                    models.Index(
                        fields=["event_type", "is_active"],
                        name="seasonal_ev_event_t_e78523_idx",
                    ),
                    models.Index(
                        fields=["start_date", "end_date"],
                        name="seasonal_ev_start_d_65f449_idx",
                    ),
                    models.Index(
                        fields=["-average_price_impact_pct"],
                        name="seasonal_ev_average_2a2e31_idx",
                    ),
                    models.Index(
                        fields=["is_recurring", "recurrence_pattern"],
                        name="seasonal_ev_is_recu_88c537_idx",
                    ),
                    models.Index(
                        fields=["-detection_timestamp"],
                        name="seasonal_ev_detecti_529a60_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="SeasonalPattern",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("analysis_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "lookback_days",
                    models.IntegerField(
                        default=365, help_text="Days of historical data analyzed"
                    ),
                ),
                (
                    "data_points_analyzed",
                    models.IntegerField(
                        default=0, help_text="Number of data points used"
                    ),
                ),
                (
                    "analysis_types",
                    models.JSONField(
                        default=list, help_text="Types of analysis performed"
                    ),
                ),
                (
                    "weekly_pattern_strength",
                    models.FloatField(
                        default=0, help_text="Strength of weekly patterns"
                    ),
                ),
                (
                    "monthly_pattern_strength",
                    models.FloatField(
                        default=0, help_text="Strength of monthly patterns"
                    ),
                ),
                (
                    "yearly_pattern_strength",
                    models.FloatField(
                        default=0, help_text="Strength of yearly patterns"
                    ),
                ),
                (
                    "event_pattern_strength",
                    models.FloatField(
                        default=0, help_text="Strength of event-based patterns"
                    ),
                ),
                (
                    "overall_pattern_strength",
                    models.FloatField(
                        default=0, help_text="Overall seasonal pattern strength"
                    ),
                ),
                (
                    "weekend_effect_pct",
                    models.FloatField(
                        default=0, help_text="Weekend price premium/discount %"
                    ),
                ),
                (
                    "best_day_of_week",
                    models.CharField(
                        default="", help_text="Best day for prices", max_length=10
                    ),
                ),
                (
                    "worst_day_of_week",
                    models.CharField(
                        default="", help_text="Worst day for prices", max_length=10
                    ),
                ),
                (
                    "day_of_week_effects",
                    models.JSONField(
                        default=dict, help_text="Day-of-week price effects"
                    ),
                ),
                (
                    "best_month",
                    models.CharField(
                        default="", help_text="Historically best month", max_length=15
                    ),
                ),
                (
                    "worst_month",
                    models.CharField(
                        default="", help_text="Historically worst month", max_length=15
                    ),
                ),
                (
                    "monthly_effects",
                    models.JSONField(default=dict, help_text="Month-by-month effects"),
                ),
                (
                    "quarterly_effects",
                    models.JSONField(
                        default=dict, help_text="Quarterly seasonal effects"
                    ),
                ),
                (
                    "detected_events",
                    models.JSONField(
                        default=list, help_text="Detected unusual activity periods"
                    ),
                ),
                (
                    "event_impact_analysis",
                    models.JSONField(
                        default=dict, help_text="Analysis of OSRS event impacts"
                    ),
                ),
                (
                    "short_term_forecast",
                    models.JSONField(default=dict, help_text="Next 7 days forecast"),
                ),
                (
                    "medium_term_forecast",
                    models.JSONField(default=dict, help_text="Next 30 days forecast"),
                ),
                (
                    "forecast_confidence",
                    models.FloatField(
                        default=0.5, help_text="Forecast confidence (0-1)"
                    ),
                ),
                (
                    "recommendations",
                    models.JSONField(
                        default=list, help_text="Generated seasonal recommendations"
                    ),
                ),
                ("analysis_duration_seconds", models.FloatField(default=0.0)),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0, help_text="Overall analysis confidence (0-1)"
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="seasonal_patterns",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "seasonal_patterns",
                "ordering": ["-analysis_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SeasonalForecast",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("forecast_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "horizon",
                    models.CharField(
                        choices=[
                            ("1d", "1 Day"),
                            ("3d", "3 Days"),
                            ("7d", "7 Days"),
                            ("14d", "14 Days"),
                            ("30d", "30 Days"),
                            ("60d", "60 Days"),
                            ("90d", "90 Days"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "target_date",
                    models.DateField(help_text="Date this forecast is for"),
                ),
                ("forecasted_price", models.FloatField(help_text="Forecasted price")),
                (
                    "confidence_level",
                    models.FloatField(
                        default=0.95, help_text="Confidence level (e.g., 0.95 for 95%)"
                    ),
                ),
                ("lower_bound", models.FloatField(help_text="Lower confidence bound")),
                ("upper_bound", models.FloatField(help_text="Upper confidence bound")),
                (
                    "base_price",
                    models.FloatField(help_text="Base price used for forecast"),
                ),
                (
                    "seasonal_factor",
                    models.FloatField(
                        default=1.0, help_text="Seasonal adjustment factor"
                    ),
                ),
                (
                    "trend_adjustment",
                    models.FloatField(
                        default=0.0, help_text="Trend component adjustment"
                    ),
                ),
                (
                    "primary_pattern_type",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly Pattern"),
                            ("monthly", "Monthly Pattern"),
                            ("yearly", "Yearly Pattern"),
                            ("event", "Event-Based"),
                            ("combined", "Combined Patterns"),
                        ],
                        default="combined",
                        max_length=20,
                    ),
                ),
                (
                    "pattern_strength",
                    models.FloatField(
                        default=0.5, help_text="Strength of pattern used (0-1)"
                    ),
                ),
                (
                    "forecast_method",
                    models.CharField(
                        default="seasonal_naive",
                        help_text="Method used for forecasting",
                        max_length=50,
                    ),
                ),
                (
                    "actual_price",
                    models.FloatField(
                        blank=True, help_text="Actual price on target date", null=True
                    ),
                ),
                (
                    "forecast_error",
                    models.FloatField(
                        blank=True, help_text="Forecast error percentage", null=True
                    ),
                ),
                (
                    "is_within_confidence_interval",
                    models.BooleanField(blank=True, null=True),
                ),
                (
                    "absolute_error",
                    models.FloatField(
                        blank=True, help_text="Absolute error in price units", null=True
                    ),
                ),
                (
                    "percentage_error",
                    models.FloatField(
                        blank=True, help_text="Percentage error", null=True
                    ),
                ),
                (
                    "validation_date",
                    models.DateTimeField(
                        blank=True, help_text="When forecast was validated", null=True
                    ),
                ),
                (
                    "seasonal_pattern",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="forecasts",
                        to="realtime_engine.seasonalpattern",
                    ),
                ),
            ],
            options={
                "db_table": "seasonal_forecasts",
                "ordering": ["target_date"],
            },
        ),
        migrations.CreateModel(
            name="SeasonalRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("recommendation_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("buy", "Buy Recommendation"),
                            ("sell", "Sell Recommendation"),
                            ("hold", "Hold Recommendation"),
                            ("avoid", "Avoid Trading"),
                            ("monitor", "Monitor for Opportunity"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "target_date",
                    models.DateField(
                        blank=True, help_text="Specific date for action", null=True
                    ),
                ),
                ("valid_from", models.DateField(help_text="Recommendation valid from")),
                (
                    "valid_until",
                    models.DateField(help_text="Recommendation valid until"),
                ),
                (
                    "primary_pattern",
                    models.CharField(
                        help_text="Primary seasonal pattern driving recommendation",
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(help_text="Recommendation confidence (0-1)"),
                ),
                (
                    "expected_impact_pct",
                    models.FloatField(help_text="Expected price impact percentage"),
                ),
                (
                    "suggested_position_size_pct",
                    models.FloatField(
                        default=5.0, help_text="Suggested position size (% of capital)"
                    ),
                ),
                (
                    "stop_loss_pct",
                    models.FloatField(
                        blank=True, help_text="Suggested stop loss %", null=True
                    ),
                ),
                (
                    "take_profit_pct",
                    models.FloatField(
                        blank=True, help_text="Suggested take profit %", null=True
                    ),
                ),
                (
                    "max_hold_days",
                    models.IntegerField(
                        default=30, help_text="Maximum recommended holding period"
                    ),
                ),
                (
                    "recommendation_text",
                    models.TextField(
                        help_text="Human-readable recommendation explanation"
                    ),
                ),
                (
                    "supporting_factors",
                    models.JSONField(
                        default=list, help_text="Factors supporting this recommendation"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_executed", models.BooleanField(default=False)),
                ("execution_timestamp", models.DateTimeField(blank=True, null=True)),
                ("execution_price", models.FloatField(blank=True, null=True)),
                (
                    "current_performance_pct",
                    models.FloatField(
                        default=0, help_text="Current performance if executed"
                    ),
                ),
                (
                    "max_performance_pct",
                    models.FloatField(
                        default=0, help_text="Maximum performance reached"
                    ),
                ),
                (
                    "min_performance_pct",
                    models.FloatField(
                        default=0, help_text="Minimum performance reached"
                    ),
                ),
                (
                    "final_performance_pct",
                    models.FloatField(
                        blank=True, help_text="Final performance when closed", null=True
                    ),
                ),
                (
                    "seasonal_pattern",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detailed_recommendations",
                        to="realtime_engine.seasonalpattern",
                    ),
                ),
            ],
            options={
                "db_table": "seasonal_recommendations",
                "ordering": ["-recommendation_timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="seasonalpattern",
            index=models.Index(
                fields=["item", "-analysis_timestamp"],
                name="seasonal_pa_item_id_826e31_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalpattern",
            index=models.Index(
                fields=["-overall_pattern_strength"],
                name="seasonal_pa_overall_e58038_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalpattern",
            index=models.Index(
                fields=["-analysis_timestamp"], name="seasonal_pa_analysi_2f9875_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalpattern",
            index=models.Index(
                fields=["best_month"], name="seasonal_pa_best_mo_a09390_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalpattern",
            index=models.Index(
                fields=["weekend_effect_pct"], name="seasonal_pa_weekend_91800d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalforecast",
            index=models.Index(
                fields=["target_date", "horizon"], name="seasonal_fo_target__6eb6ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalforecast",
            index=models.Index(
                fields=["-forecast_timestamp"], name="seasonal_fo_forecas_c552fc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalforecast",
            index=models.Index(
                fields=["primary_pattern_type"], name="seasonal_fo_primary_87a33e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalforecast",
            index=models.Index(
                fields=["-pattern_strength"], name="seasonal_fo_pattern_978cd6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalforecast",
            index=models.Index(
                fields=["actual_price"], name="seasonal_fo_actual__7abcf8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="seasonalforecast",
            unique_together={("seasonal_pattern", "horizon", "target_date")},
        ),
        migrations.AddIndex(
            model_name="seasonalrecommendation",
            index=models.Index(
                fields=["valid_from", "valid_until"],
                name="seasonal_re_valid_f_b1f8be_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalrecommendation",
            index=models.Index(
                fields=["recommendation_type", "is_active"],
                name="seasonal_re_recomme_5700f4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalrecommendation",
            index=models.Index(
                fields=["-confidence_score"], name="seasonal_re_confide_0725ef_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalrecommendation",
            index=models.Index(
                fields=["-recommendation_timestamp"],
                name="seasonal_re_recomme_b240f7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="seasonalrecommendation",
            index=models.Index(
                fields=["is_executed"], name="seasonal_re_is_exec_e8b29f_idx"
            ),
        ),
    ]
