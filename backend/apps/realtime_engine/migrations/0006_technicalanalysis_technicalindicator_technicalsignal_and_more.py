# Generated by Django 5.2.5 on 2025-09-04 17:05

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0001_initial"),
        ("realtime_engine", "0005_portfoliooptimization_portfolioallocation_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="TechnicalAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("analysis_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "timeframes_analyzed",
                    models.JSONField(
                        default=list,
                        help_text="List of timeframes analyzed (5m, 15m, 1h, 4h, 1d)",
                    ),
                ),
                (
                    "lookback_days",
                    models.IntegerField(
                        default=30, help_text="Days of historical data used"
                    ),
                ),
                (
                    "data_points_used",
                    models.IntegerField(
                        default=0, help_text="Total data points in analysis"
                    ),
                ),
                (
                    "overall_recommendation",
                    models.CharField(
                        choices=[
                            ("strong_buy", "Strong Buy"),
                            ("buy", "Buy"),
                            ("weak_buy", "Weak Buy"),
                            ("neutral", "Neutral"),
                            ("weak_sell", "Weak Sell"),
                            ("sell", "Sell"),
                            ("strong_sell", "Strong Sell"),
                        ],
                        default="neutral",
                        max_length=20,
                    ),
                ),
                (
                    "strength_score",
                    models.FloatField(
                        default=0, help_text="Overall technical strength (0-100)"
                    ),
                ),
                (
                    "consensus_signal",
                    models.CharField(default="neutral", max_length=10),
                ),
                (
                    "timeframe_agreement",
                    models.FloatField(
                        default=0, help_text="Agreement between timeframes (0-1)"
                    ),
                ),
                (
                    "dominant_timeframes",
                    models.JSONField(
                        default=list, help_text="Timeframes supporting consensus"
                    ),
                ),
                (
                    "conflicting_signals",
                    models.BooleanField(
                        default=False,
                        help_text="Whether timeframes show conflicting signals",
                    ),
                ),
                ("analysis_duration_seconds", models.FloatField(default=0.0)),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0, help_text="Analysis confidence (0-1)"
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="technical_analyses",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "technical_analyses",
                "ordering": ["-analysis_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="TechnicalIndicator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timeframe",
                    models.CharField(help_text="5m, 15m, 1h, 4h, 1d", max_length=10),
                ),
                ("data_points", models.IntegerField(default=0)),
                (
                    "sma_short",
                    models.FloatField(
                        blank=True, help_text="Short-term SMA value", null=True
                    ),
                ),
                (
                    "sma_long",
                    models.FloatField(
                        blank=True, help_text="Long-term SMA value", null=True
                    ),
                ),
                (
                    "ema_short",
                    models.FloatField(
                        blank=True, help_text="Short-term EMA value", null=True
                    ),
                ),
                (
                    "ema_long",
                    models.FloatField(
                        blank=True, help_text="Long-term EMA value", null=True
                    ),
                ),
                (
                    "rsi_value",
                    models.FloatField(
                        blank=True, help_text="RSI value (0-100)", null=True
                    ),
                ),
                (
                    "rsi_signal",
                    models.CharField(
                        default="neutral", help_text="RSI signal", max_length=10
                    ),
                ),
                (
                    "rsi_strength",
                    models.FloatField(default=0, help_text="RSI signal strength"),
                ),
                (
                    "macd_line",
                    models.FloatField(
                        blank=True, help_text="MACD line value", null=True
                    ),
                ),
                (
                    "macd_signal_line",
                    models.FloatField(
                        blank=True, help_text="MACD signal line", null=True
                    ),
                ),
                (
                    "macd_histogram",
                    models.FloatField(
                        blank=True, help_text="MACD histogram", null=True
                    ),
                ),
                (
                    "macd_signal",
                    models.CharField(
                        default="neutral", help_text="MACD signal", max_length=10
                    ),
                ),
                (
                    "macd_strength",
                    models.FloatField(default=0, help_text="MACD signal strength"),
                ),
                (
                    "bb_upper",
                    models.FloatField(
                        blank=True, help_text="Bollinger upper band", null=True
                    ),
                ),
                (
                    "bb_middle",
                    models.FloatField(
                        blank=True, help_text="Bollinger middle band", null=True
                    ),
                ),
                (
                    "bb_lower",
                    models.FloatField(
                        blank=True, help_text="Bollinger lower band", null=True
                    ),
                ),
                (
                    "bb_position",
                    models.FloatField(
                        blank=True,
                        help_text="Price position relative to bands",
                        null=True,
                    ),
                ),
                (
                    "bb_signal",
                    models.CharField(
                        default="neutral",
                        help_text="Bollinger Bands signal",
                        max_length=10,
                    ),
                ),
                (
                    "bb_strength",
                    models.FloatField(default=0, help_text="BB signal strength"),
                ),
                (
                    "obv_value",
                    models.FloatField(
                        blank=True, help_text="On-Balance Volume", null=True
                    ),
                ),
                (
                    "volume_sma",
                    models.FloatField(blank=True, help_text="Volume SMA", null=True),
                ),
                (
                    "volume_signal",
                    models.CharField(
                        default="normal", help_text="Volume signal", max_length=20
                    ),
                ),
                (
                    "volume_strength",
                    models.FloatField(default=0, help_text="Volume signal strength"),
                ),
                (
                    "osrs_momentum",
                    models.FloatField(default=0, help_text="OSRS momentum score"),
                ),
                (
                    "flip_probability",
                    models.FloatField(
                        default=0.5, help_text="Probability of successful flip"
                    ),
                ),
                (
                    "flip_confidence",
                    models.FloatField(
                        default=0.5, help_text="Confidence in flip probability"
                    ),
                ),
                (
                    "trend_direction",
                    models.CharField(
                        choices=[
                            ("uptrend", "Uptrend"),
                            ("downtrend", "Downtrend"),
                            ("sideways", "Sideways"),
                        ],
                        default="sideways",
                        max_length=20,
                    ),
                ),
                (
                    "trend_strength",
                    models.FloatField(default=0, help_text="Trend strength (0-1)"),
                ),
                (
                    "trend_duration",
                    models.IntegerField(
                        default=0, help_text="Trend duration in periods"
                    ),
                ),
                (
                    "support_levels",
                    models.JSONField(
                        default=list, help_text="Identified support levels"
                    ),
                ),
                (
                    "resistance_levels",
                    models.JSONField(
                        default=list, help_text="Identified resistance levels"
                    ),
                ),
                ("overall_signal", models.CharField(default="neutral", max_length=10)),
                (
                    "signal_strength",
                    models.FloatField(
                        default=0,
                        help_text="Overall signal strength for this timeframe",
                    ),
                ),
                (
                    "technical_analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="indicators",
                        to="realtime_engine.technicalanalysis",
                    ),
                ),
            ],
            options={
                "db_table": "technical_indicators",
                "ordering": ["timeframe"],
            },
        ),
        migrations.CreateModel(
            name="TechnicalSignal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("signal_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "signal_type",
                    models.CharField(
                        choices=[
                            ("entry", "Entry Signal"),
                            ("exit", "Exit Signal"),
                            ("stop_loss", "Stop Loss"),
                            ("take_profit", "Take Profit"),
                            ("rebalance", "Rebalance Signal"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "direction",
                    models.CharField(
                        choices=[("buy", "Buy"), ("sell", "Sell"), ("hold", "Hold")],
                        max_length=10,
                    ),
                ),
                ("strength", models.FloatField(help_text="Signal strength (0-1)")),
                ("confidence", models.FloatField(help_text="Signal confidence (0-1)")),
                (
                    "entry_price",
                    models.IntegerField(
                        blank=True, help_text="Suggested entry price", null=True
                    ),
                ),
                (
                    "stop_loss_price",
                    models.IntegerField(
                        blank=True, help_text="Stop loss price", null=True
                    ),
                ),
                (
                    "take_profit_price",
                    models.IntegerField(
                        blank=True, help_text="Take profit price", null=True
                    ),
                ),
                (
                    "position_size_pct",
                    models.FloatField(
                        default=0.05, help_text="Suggested position size (% of capital)"
                    ),
                ),
                (
                    "risk_reward_ratio",
                    models.FloatField(
                        blank=True, help_text="Risk/reward ratio", null=True
                    ),
                ),
                (
                    "max_hold_time_hours",
                    models.IntegerField(
                        default=24, help_text="Maximum hold time in hours"
                    ),
                ),
                (
                    "primary_indicators",
                    models.JSONField(
                        default=list, help_text="Primary indicators supporting signal"
                    ),
                ),
                (
                    "supporting_timeframes",
                    models.JSONField(
                        default=list, help_text="Timeframes supporting signal"
                    ),
                ),
                (
                    "signal_reasoning",
                    models.TextField(
                        blank=True, help_text="Human-readable signal reasoning"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_executed", models.BooleanField(default=False)),
                ("execution_timestamp", models.DateTimeField(blank=True, null=True)),
                ("execution_price", models.IntegerField(blank=True, null=True)),
                (
                    "current_pnl",
                    models.FloatField(default=0, help_text="Current P&L if executed"),
                ),
                (
                    "max_pnl",
                    models.FloatField(default=0, help_text="Maximum P&L reached"),
                ),
                (
                    "min_pnl",
                    models.FloatField(default=0, help_text="Minimum P&L reached"),
                ),
                (
                    "technical_analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="signals",
                        to="realtime_engine.technicalanalysis",
                    ),
                ),
            ],
            options={
                "db_table": "technical_signals",
                "ordering": ["-signal_timestamp"],
            },
        ),
        migrations.AddIndex(
            model_name="technicalanalysis",
            index=models.Index(
                fields=["item", "-analysis_timestamp"],
                name="technical_a_item_id_3921d3_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="technicalanalysis",
            index=models.Index(
                fields=["-strength_score"], name="technical_a_strengt_cd511e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalanalysis",
            index=models.Index(
                fields=["overall_recommendation"], name="technical_a_overall_3a9419_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalanalysis",
            index=models.Index(
                fields=["-analysis_timestamp"], name="technical_a_analysi_0ae59f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalindicator",
            index=models.Index(
                fields=["timeframe", "overall_signal"],
                name="technical_i_timefra_78f82e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="technicalindicator",
            index=models.Index(
                fields=["-rsi_value"], name="technical_i_rsi_val_52b5ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalindicator",
            index=models.Index(
                fields=["-signal_strength"], name="technical_i_signal__70ab55_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalindicator",
            index=models.Index(
                fields=["trend_direction"], name="technical_i_trend_d_310e13_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="technicalindicator",
            unique_together={("technical_analysis", "timeframe")},
        ),
        migrations.AddIndex(
            model_name="technicalsignal",
            index=models.Index(
                fields=["-signal_timestamp"], name="technical_s_signal__aacaf8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="technicalsignal",
            index=models.Index(
                fields=["signal_type", "direction"],
                name="technical_s_signal__cf7192_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="technicalsignal",
            index=models.Index(
                fields=["-strength", "-confidence"],
                name="technical_s_strengt_3b1d38_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="technicalsignal",
            index=models.Index(
                fields=["is_active", "is_executed"],
                name="technical_s_is_acti_025722_idx",
            ),
        ),
    ]
