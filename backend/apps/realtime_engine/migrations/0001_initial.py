# Generated by Django 5.2.5 on 2025-09-04 03:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("items", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="StreamingDataStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("weirdgloop", "Weird Gloop API"),
                            ("runescape_wiki", "RuneScape Wiki API"),
                            ("internal_calculations", "Internal Calculations"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("last_successful_update", models.DateTimeField(blank=True, null=True)),
                ("last_error", models.TextField(blank=True)),
                ("error_count_24h", models.IntegerField(default=0)),
                ("average_response_time_ms", models.FloatField(default=0.0)),
                ("requests_per_hour", models.IntegerField(default=0)),
                (
                    "success_rate_24h",
                    models.FloatField(
                        default=100.0, help_text="Success rate percentage"
                    ),
                ),
                (
                    "data_freshness_minutes",
                    models.FloatField(
                        default=0.0, help_text="Average data age in minutes"
                    ),
                ),
                (
                    "coverage_percentage",
                    models.FloatField(
                        default=100.0, help_text="% of items with recent data"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "streaming_data_status",
            },
        ),
        migrations.CreateModel(
            name="MarketEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("price_spike", "Price Spike"),
                            ("price_crash", "Price Crash"),
                            ("volume_surge", "Volume Surge"),
                            ("new_opportunity", "New Trading Opportunity"),
                            ("whale_activity", "Large Trade Detected"),
                            ("market_manipulation", "Potential Manipulation"),
                            ("news_impact", "Game Update Impact"),
                            ("seasonal_pattern", "Seasonal Price Pattern"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "impact_score",
                    models.FloatField(
                        default=0.0, help_text="Event impact intensity (0-100)"
                    ),
                ),
                (
                    "event_data",
                    models.JSONField(
                        default=dict, help_text="Additional event metadata"
                    ),
                ),
                ("detected_at", models.DateTimeField(auto_now_add=True)),
                (
                    "estimated_duration_minutes",
                    models.IntegerField(
                        default=60, help_text="How long event might last"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "confidence",
                    models.FloatField(
                        default=0.8, help_text="Detection confidence (0-1)"
                    ),
                ),
                (
                    "items",
                    models.ManyToManyField(
                        related_name="market_events", to="items.item"
                    ),
                ),
            ],
            options={
                "db_table": "market_events",
                "ordering": ["-detected_at"],
                "indexes": [
                    models.Index(
                        fields=["-detected_at"], name="market_even_detecte_c4eaa5_idx"
                    ),
                    models.Index(
                        fields=["event_type", "-impact_score"],
                        name="market_even_event_t_2835b2_idx",
                    ),
                    models.Index(
                        fields=["is_active", "-detected_at"],
                        name="market_even_is_acti_841c74_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="MarketMomentum",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "price_velocity",
                    models.FloatField(
                        default=0.0, help_text="GP per minute price change"
                    ),
                ),
                (
                    "price_acceleration",
                    models.FloatField(
                        default=0.0, help_text="Change in velocity (GP/minÂ²)"
                    ),
                ),
                (
                    "momentum_score",
                    models.FloatField(
                        default=0.0, help_text="Overall momentum score (0-100)"
                    ),
                ),
                (
                    "volume_velocity",
                    models.FloatField(default=0.0, help_text="Volume change rate"),
                ),
                (
                    "volume_shock_score",
                    models.FloatField(
                        default=0.0, help_text="Volume spike intensity (0-100)"
                    ),
                ),
                (
                    "trend_direction",
                    models.CharField(
                        choices=[
                            ("strong_bull", "Strong Bullish"),
                            ("bull", "Bullish"),
                            ("neutral", "Neutral"),
                            ("bear", "Bearish"),
                            ("strong_bear", "Strong Bearish"),
                        ],
                        default="neutral",
                        max_length=20,
                    ),
                ),
                (
                    "trend_strength",
                    models.FloatField(default=0.0, help_text="Trend strength (0-100)"),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "measurement_window_minutes",
                    models.IntegerField(
                        default=5, help_text="Analysis window in minutes"
                    ),
                ),
                (
                    "item",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="momentum",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "market_momentum",
                "indexes": [
                    models.Index(
                        fields=["-momentum_score"],
                        name="market_mome_momentu_306132_idx",
                    ),
                    models.Index(
                        fields=["-volume_shock_score"],
                        name="market_mome_volume__ec973d_idx",
                    ),
                    models.Index(
                        fields=["-price_velocity"],
                        name="market_mome_price_v_240960_idx",
                    ),
                    models.Index(
                        fields=["trend_direction", "-trend_strength"],
                        name="market_mome_trend_d_62c64a_idx",
                    ),
                    models.Index(
                        fields=["-last_updated"], name="market_mome_last_up_4b0582_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RiskMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("overall_risk_score", models.FloatField(default=50.0)),
                (
                    "volatility_risk",
                    models.FloatField(default=0.0, help_text="Price volatility risk"),
                ),
                (
                    "liquidity_risk",
                    models.FloatField(default=0.0, help_text="Low volume risk"),
                ),
                (
                    "market_depth_risk",
                    models.FloatField(default=0.0, help_text="Thin orderbook risk"),
                ),
                (
                    "price_volatility_24h",
                    models.FloatField(
                        default=0.0, help_text="24h price standard deviation %"
                    ),
                ),
                (
                    "max_drawdown_7d",
                    models.FloatField(
                        default=0.0, help_text="Maximum 7-day price decline %"
                    ),
                ),
                (
                    "recommended_max_investment_pct",
                    models.FloatField(default=10.0, help_text="% of capital to invest"),
                ),
                (
                    "position_hold_time_estimate",
                    models.IntegerField(
                        default=240, help_text="Estimated hold time in minutes"
                    ),
                ),
                (
                    "risk_category",
                    models.CharField(
                        choices=[
                            ("very_low", "Very Low Risk"),
                            ("low", "Low Risk"),
                            ("medium", "Medium Risk"),
                            ("high", "High Risk"),
                            ("very_high", "Very High Risk"),
                            ("extreme", "Extreme Risk"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "confidence_level",
                    models.FloatField(
                        default=0.8, help_text="Risk assessment confidence"
                    ),
                ),
                (
                    "item",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="risk_metrics",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "risk_metrics",
                "indexes": [
                    models.Index(
                        fields=["risk_category"], name="risk_metric_risk_ca_f2342f_idx"
                    ),
                    models.Index(
                        fields=["-overall_risk_score"],
                        name="risk_metric_overall_a33da0_idx",
                    ),
                    models.Index(
                        fields=["-recommended_max_investment_pct"],
                        name="risk_metric_recomme_434c8a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="VolumeAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("current_hourly_volume", models.IntegerField(default=0)),
                ("current_daily_volume", models.IntegerField(default=0)),
                (
                    "average_hourly_volume",
                    models.FloatField(default=0.0, help_text="7-day average"),
                ),
                (
                    "average_daily_volume",
                    models.FloatField(default=0.0, help_text="7-day average"),
                ),
                (
                    "volume_ratio_hourly",
                    models.FloatField(
                        default=1.0, help_text="Current/Average hourly volume"
                    ),
                ),
                (
                    "volume_ratio_daily",
                    models.FloatField(
                        default=1.0, help_text="Current/Average daily volume"
                    ),
                ),
                (
                    "liquidity_level",
                    models.CharField(
                        choices=[
                            ("extreme", "Extremely High (10k+ daily)"),
                            ("very_high", "Very High (5k-10k daily)"),
                            ("high", "High (1k-5k daily)"),
                            ("medium", "Medium (500-1k daily)"),
                            ("low", "Low (100-500 daily)"),
                            ("very_low", "Very Low (50-100 daily)"),
                            ("minimal", "Minimal (<50 daily)"),
                        ],
                        default="minimal",
                        max_length=20,
                    ),
                ),
                (
                    "flip_completion_probability",
                    models.FloatField(
                        default=0.0,
                        help_text="Probability of completing flip in 4 hours",
                    ),
                ),
                (
                    "recommended_position_size",
                    models.IntegerField(
                        default=0, help_text="Recommended quantity to flip"
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "confidence_score",
                    models.FloatField(default=0.0, help_text="Data confidence (0-100)"),
                ),
                (
                    "item",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="volume_analysis",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "volume_analysis",
                "indexes": [
                    models.Index(
                        fields=["-volume_ratio_daily"],
                        name="volume_anal_volume__b3c5e4_idx",
                    ),
                    models.Index(
                        fields=["-current_daily_volume"],
                        name="volume_anal_current_192a13_idx",
                    ),
                    models.Index(
                        fields=["liquidity_level"],
                        name="volume_anal_liquidi_2d0ef9_idx",
                    ),
                    models.Index(
                        fields=["-flip_completion_probability"],
                        name="volume_anal_flip_co_e627f2_idx",
                    ),
                ],
            },
        ),
    ]
