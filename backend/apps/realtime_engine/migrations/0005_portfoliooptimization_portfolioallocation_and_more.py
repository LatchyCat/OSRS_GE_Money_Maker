# Generated by Django 5.2.5 on 2025-09-04 16:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0001_initial"),
        ("realtime_engine", "0004_priceprediction"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PortfolioOptimization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("optimization_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "total_capital",
                    models.IntegerField(
                        help_text="Total capital available for optimization (GP)"
                    ),
                ),
                (
                    "target_return",
                    models.FloatField(
                        default=0.05, help_text="Target daily return rate (0.05 = 5%)"
                    ),
                ),
                (
                    "risk_tolerance",
                    models.FloatField(
                        default=0.5,
                        help_text="Risk tolerance (0-1, higher = more risk)",
                    ),
                ),
                (
                    "optimization_method",
                    models.CharField(
                        choices=[
                            ("risk_parity", "Risk Parity"),
                            (
                                "modern_portfolio_theory",
                                "Modern Portfolio Theory (MPT)",
                            ),
                            ("kelly_criterion", "Kelly Criterion"),
                            ("equal_weight", "Equal Weight"),
                            ("maximum_sharpe", "Maximum Sharpe Ratio"),
                            ("minimum_variance", "Minimum Variance"),
                        ],
                        default="risk_parity",
                        max_length=50,
                    ),
                ),
                (
                    "expected_daily_return",
                    models.FloatField(
                        default=0.0, help_text="Expected daily return rate"
                    ),
                ),
                (
                    "expected_daily_risk",
                    models.FloatField(
                        default=0.0, help_text="Expected daily volatility"
                    ),
                ),
                (
                    "sharpe_ratio",
                    models.FloatField(
                        default=0.0, help_text="Risk-adjusted return ratio"
                    ),
                ),
                (
                    "sortino_ratio",
                    models.FloatField(
                        default=0.0, help_text="Downside risk-adjusted return"
                    ),
                ),
                (
                    "diversification_ratio",
                    models.FloatField(
                        default=1.0, help_text="Portfolio diversification score"
                    ),
                ),
                (
                    "max_position_size",
                    models.FloatField(
                        default=0.2, help_text="Maximum % of capital per item"
                    ),
                ),
                (
                    "min_position_size",
                    models.FloatField(
                        default=0.01, help_text="Minimum % of capital per item"
                    ),
                ),
                (
                    "max_items",
                    models.IntegerField(
                        default=10, help_text="Maximum number of items in portfolio"
                    ),
                ),
                (
                    "liquidity_requirement",
                    models.CharField(
                        default="medium",
                        help_text="Required liquidity level",
                        max_length=20,
                    ),
                ),
                ("recommended_items_count", models.IntegerField(default=0)),
                (
                    "total_allocated_capital",
                    models.IntegerField(
                        default=0, help_text="Total capital actually allocated"
                    ),
                ),
                (
                    "cash_reserve",
                    models.IntegerField(
                        default=0, help_text="Unallocated cash reserve"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "performance_score",
                    models.FloatField(
                        blank=True,
                        help_text="Actual performance vs expected",
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_optimizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "portfolio_optimizations",
                "ordering": ["-optimization_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PortfolioAllocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("weight", models.FloatField(help_text="Portfolio weight (0-1)")),
                (
                    "allocated_capital",
                    models.IntegerField(
                        help_text="Capital allocated to this item (GP)"
                    ),
                ),
                (
                    "recommended_quantity",
                    models.IntegerField(help_text="Recommended quantity to buy"),
                ),
                (
                    "target_price",
                    models.IntegerField(help_text="Target purchase price per item"),
                ),
                (
                    "individual_risk",
                    models.FloatField(help_text="Individual item risk score"),
                ),
                (
                    "contribution_to_risk",
                    models.FloatField(help_text="Contribution to total portfolio risk"),
                ),
                (
                    "beta",
                    models.FloatField(
                        default=1.0, help_text="Beta relative to overall OSRS market"
                    ),
                ),
                (
                    "expected_return",
                    models.FloatField(help_text="Expected daily return for this item"),
                ),
                (
                    "confidence_score",
                    models.FloatField(help_text="Confidence in allocation (0-1)"),
                ),
                (
                    "ge_limit_utilized",
                    models.IntegerField(default=0, help_text="GE limit utilization"),
                ),
                (
                    "liquidity_score",
                    models.FloatField(help_text="Item liquidity score"),
                ),
                (
                    "allocation_reasons",
                    models.JSONField(
                        default=list,
                        help_text="Factors that influenced this allocation",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("recommended", "Recommended"),
                            ("partially_filled", "Partially Filled"),
                            ("filled", "Fully Filled"),
                            ("failed", "Failed to Fill"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="recommended",
                        max_length=20,
                    ),
                ),
                ("quantity_filled", models.IntegerField(default=0)),
                ("average_fill_price", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_allocations",
                        to="items.item",
                    ),
                ),
                (
                    "portfolio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="allocations",
                        to="realtime_engine.portfoliooptimization",
                    ),
                ),
            ],
            options={
                "db_table": "portfolio_allocations",
                "ordering": ["-weight"],
            },
        ),
        migrations.CreateModel(
            name="PortfolioRebalance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rebalance_timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "trigger_reason",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled Rebalance"),
                            ("drift_threshold", "Portfolio Drift Threshold"),
                            ("market_condition", "Market Condition Change"),
                            ("new_opportunity", "New Trading Opportunity"),
                            ("risk_breach", "Risk Limit Breach"),
                            ("manual", "Manual Rebalance"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "pre_rebalance_return",
                    models.FloatField(help_text="Portfolio return before rebalance"),
                ),
                (
                    "pre_rebalance_risk",
                    models.FloatField(help_text="Portfolio risk before rebalance"),
                ),
                (
                    "pre_rebalance_sharpe",
                    models.FloatField(help_text="Sharpe ratio before rebalance"),
                ),
                ("post_rebalance_return", models.FloatField(blank=True, null=True)),
                ("post_rebalance_risk", models.FloatField(blank=True, null=True)),
                ("post_rebalance_sharpe", models.FloatField(blank=True, null=True)),
                ("total_trades_required", models.IntegerField(default=0)),
                ("completed_trades", models.IntegerField(default=0)),
                ("failed_trades", models.IntegerField(default=0)),
                (
                    "total_transaction_cost",
                    models.IntegerField(
                        default=0, help_text="Estimated transaction costs"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Execution"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("partial", "Partially Completed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("rebalance_notes", models.TextField(blank=True)),
                (
                    "execution_duration_minutes",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "portfolio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rebalances",
                        to="realtime_engine.portfoliooptimization",
                    ),
                ),
            ],
            options={
                "db_table": "portfolio_rebalances",
                "ordering": ["-rebalance_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PortfolioAction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("buy", "Buy"),
                            ("sell", "Sell"),
                            ("hold", "Hold"),
                            ("reduce", "Reduce Position"),
                            ("increase", "Increase Position"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "target_quantity",
                    models.IntegerField(help_text="Target quantity for this action"),
                ),
                (
                    "current_quantity",
                    models.IntegerField(default=0, help_text="Current quantity held"),
                ),
                (
                    "quantity_change",
                    models.IntegerField(help_text="Quantity change required"),
                ),
                (
                    "target_price",
                    models.IntegerField(help_text="Target price for execution"),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5, help_text="Execution priority (1=highest, 10=lowest)"
                    ),
                ),
                (
                    "estimated_execution_time",
                    models.IntegerField(
                        help_text="Estimated time to complete (minutes)"
                    ),
                ),
                ("respects_ge_limit", models.BooleanField(default=True)),
                (
                    "max_slippage_pct",
                    models.FloatField(
                        default=2.0, help_text="Maximum acceptable slippage %"
                    ),
                ),
                ("executed_quantity", models.IntegerField(default=0)),
                ("average_execution_price", models.IntegerField(blank=True, null=True)),
                ("execution_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("queued", "Queued for Execution"),
                            ("executing", "Executing"),
                            ("completed", "Completed"),
                            ("partial", "Partially Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("failure_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_actions",
                        to="items.item",
                    ),
                ),
                (
                    "rebalance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="actions",
                        to="realtime_engine.portfoliorebalance",
                    ),
                ),
            ],
            options={
                "db_table": "portfolio_actions",
                "ordering": ["priority", "-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="portfoliooptimization",
            index=models.Index(
                fields=["user", "-optimization_timestamp"],
                name="portfolio_o_user_id_237db7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="portfoliooptimization",
            index=models.Index(
                fields=["-sharpe_ratio"], name="portfolio_o_sharpe__06d5a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfoliooptimization",
            index=models.Index(
                fields=["optimization_method"], name="portfolio_o_optimiz_6cbc94_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfoliooptimization",
            index=models.Index(
                fields=["is_active"], name="portfolio_o_is_acti_b401bf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfolioallocation",
            index=models.Index(
                fields=["portfolio", "-weight"], name="portfolio_a_portfol_4eab7a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfolioallocation",
            index=models.Index(
                fields=["-expected_return"], name="portfolio_a_expecte_cf9a9c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfolioallocation",
            index=models.Index(fields=["status"], name="portfolio_a_status_4a897d_idx"),
        ),
        migrations.AddIndex(
            model_name="portfolioallocation",
            index=models.Index(
                fields=["-confidence_score"], name="portfolio_a_confide_d5919d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="portfolioallocation",
            unique_together={("portfolio", "item")},
        ),
        migrations.AddIndex(
            model_name="portfoliorebalance",
            index=models.Index(
                fields=["portfolio", "-rebalance_timestamp"],
                name="portfolio_r_portfol_3c624d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="portfoliorebalance",
            index=models.Index(
                fields=["trigger_reason"], name="portfolio_r_trigger_edba25_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfoliorebalance",
            index=models.Index(fields=["status"], name="portfolio_r_status_1a0e65_idx"),
        ),
        migrations.AddIndex(
            model_name="portfolioaction",
            index=models.Index(
                fields=["rebalance", "priority"], name="portfolio_a_rebalan_e41596_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfolioaction",
            index=models.Index(
                fields=["status", "-priority"], name="portfolio_a_status_4882a0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfolioaction",
            index=models.Index(
                fields=["action_type"], name="portfolio_a_action__a1d1a8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="portfolioaction",
            index=models.Index(
                fields=["-created_at"], name="portfolio_a_created_0c132a_idx"
            ),
        ),
    ]
