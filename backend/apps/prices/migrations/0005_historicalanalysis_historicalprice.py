# Generated by Django 5.2.5 on 2025-09-01 06:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0001_initial"),
        ("prices", "0004_add_merchant_models"),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "volatility_7d",
                    models.FloatField(
                        blank=True, help_text="7-day price volatility (0-1)", null=True
                    ),
                ),
                (
                    "volatility_30d",
                    models.FloatField(
                        blank=True, help_text="30-day price volatility (0-1)", null=True
                    ),
                ),
                (
                    "volatility_90d",
                    models.FloatField(
                        blank=True, help_text="90-day price volatility (0-1)", null=True
                    ),
                ),
                (
                    "volatility_365d",
                    models.FloatField(
                        blank=True,
                        help_text="365-day price volatility (0-1)",
                        null=True,
                    ),
                ),
                (
                    "trend_7d",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("strong_up", "Strong Uptrend"),
                            ("up", "Uptrend"),
                            ("sideways", "Sideways"),
                            ("down", "Downtrend"),
                            ("strong_down", "Strong Downtrend"),
                        ],
                        help_text="7-day trend direction",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "trend_30d",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("strong_up", "Strong Uptrend"),
                            ("up", "Uptrend"),
                            ("sideways", "Sideways"),
                            ("down", "Downtrend"),
                            ("strong_down", "Strong Downtrend"),
                        ],
                        help_text="30-day trend direction",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "trend_90d",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("strong_up", "Strong Uptrend"),
                            ("up", "Uptrend"),
                            ("sideways", "Sideways"),
                            ("down", "Downtrend"),
                            ("strong_down", "Strong Downtrend"),
                        ],
                        help_text="90-day trend direction",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "support_level_7d",
                    models.IntegerField(
                        blank=True, help_text="7-day support level in GP", null=True
                    ),
                ),
                (
                    "support_level_30d",
                    models.IntegerField(
                        blank=True, help_text="30-day support level in GP", null=True
                    ),
                ),
                (
                    "resistance_level_7d",
                    models.IntegerField(
                        blank=True, help_text="7-day resistance level in GP", null=True
                    ),
                ),
                (
                    "resistance_level_30d",
                    models.IntegerField(
                        blank=True, help_text="30-day resistance level in GP", null=True
                    ),
                ),
                (
                    "price_min_7d",
                    models.IntegerField(
                        blank=True, help_text="Lowest price in last 7 days", null=True
                    ),
                ),
                (
                    "price_max_7d",
                    models.IntegerField(
                        blank=True, help_text="Highest price in last 7 days", null=True
                    ),
                ),
                (
                    "price_min_30d",
                    models.IntegerField(
                        blank=True, help_text="Lowest price in last 30 days", null=True
                    ),
                ),
                (
                    "price_max_30d",
                    models.IntegerField(
                        blank=True, help_text="Highest price in last 30 days", null=True
                    ),
                ),
                (
                    "price_min_90d",
                    models.IntegerField(
                        blank=True, help_text="Lowest price in last 90 days", null=True
                    ),
                ),
                (
                    "price_max_90d",
                    models.IntegerField(
                        blank=True, help_text="Highest price in last 90 days", null=True
                    ),
                ),
                (
                    "price_min_all_time",
                    models.IntegerField(
                        blank=True, help_text="All-time low price", null=True
                    ),
                ),
                (
                    "price_max_all_time",
                    models.IntegerField(
                        blank=True, help_text="All-time high price", null=True
                    ),
                ),
                (
                    "seasonal_pattern",
                    models.JSONField(
                        blank=True, help_text="Detected seasonal patterns", null=True
                    ),
                ),
                (
                    "flash_crash_history",
                    models.JSONField(
                        blank=True, help_text="History of flash crashes", null=True
                    ),
                ),
                (
                    "recovery_patterns",
                    models.JSONField(
                        blank=True,
                        help_text="Price recovery patterns after crashes",
                        null=True,
                    ),
                ),
                (
                    "current_price_percentile_30d",
                    models.FloatField(
                        blank=True,
                        help_text="Current price percentile vs 30d (0-100)",
                        null=True,
                    ),
                ),
                (
                    "current_price_percentile_90d",
                    models.FloatField(
                        blank=True,
                        help_text="Current price percentile vs 90d (0-100)",
                        null=True,
                    ),
                ),
                (
                    "data_points_count",
                    models.IntegerField(
                        default=0, help_text="Number of historical data points used"
                    ),
                ),
                ("last_analyzed", models.DateTimeField(auto_now=True)),
                (
                    "analysis_quality",
                    models.CharField(
                        choices=[
                            ("excellent", "Excellent (90+ days data)"),
                            ("good", "Good (30-89 days data)"),
                            ("fair", "Fair (7-29 days data)"),
                            ("poor", "Poor (<7 days data)"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Quality of historical analysis based on data availability",
                        max_length=20,
                    ),
                ),
                (
                    "item",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historical_analysis",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "historical_analysis",
                "indexes": [
                    models.Index(
                        fields=["last_analyzed"], name="historical__last_an_c3690a_idx"
                    ),
                    models.Index(
                        fields=["analysis_quality"],
                        name="historical__analysi_803a9c_idx",
                    ),
                    models.Index(
                        fields=["trend_30d"], name="historical__trend_3_abcbb3_idx"
                    ),
                    models.Index(
                        fields=["volatility_30d"], name="historical__volatil_7c3cc4_idx"
                    ),
                    models.Index(
                        fields=["current_price_percentile_30d"],
                        name="historical__current_911a4a_idx",
                    ),
                    models.Index(
                        fields=["current_price_percentile_90d"],
                        name="historical__current_a0f72f_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="HistoricalPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("price", models.IntegerField(help_text="Historical price in GP")),
                (
                    "volume",
                    models.IntegerField(
                        blank=True,
                        help_text="Trading volume at this timestamp",
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(help_text="When this price was recorded"),
                ),
                (
                    "data_source",
                    models.CharField(
                        default="weirdgloop", help_text="API source", max_length=50
                    ),
                ),
                (
                    "api_response_raw",
                    models.JSONField(
                        blank=True,
                        help_text="Raw API response for debugging",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this data point has been validated",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historical_prices",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "historical_prices",
                "indexes": [
                    models.Index(
                        fields=["item", "-timestamp"],
                        name="historical__item_id_a13c45_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="historical__timesta_0e5b96_idx"
                    ),
                    models.Index(
                        fields=["data_source"], name="historical__data_so_1ecbe7_idx"
                    ),
                    models.Index(
                        fields=["is_validated"], name="historical__is_vali_f1a0d8_idx"
                    ),
                    models.Index(
                        fields=["item", "timestamp", "data_source"],
                        name="historical__item_id_8421fc_idx",
                    ),
                ],
                "unique_together": {("item", "timestamp", "data_source")},
            },
        ),
    ]
