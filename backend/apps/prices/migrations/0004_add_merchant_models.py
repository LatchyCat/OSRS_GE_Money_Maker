# Generated by Django 5.2.5 on 2025-08-30 14:31

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("items", "0001_initial"),
        ("prices", "0003_profitcalculation_confidence_score_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="MarketTrend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("1h", "1 Hour"),
                            ("6h", "6 Hours"),
                            ("24h", "24 Hours"),
                            ("7d", "7 Days"),
                            ("30d", "30 Days"),
                        ],
                        max_length=20,
                    ),
                ),
                ("period_start", models.DateTimeField()),
                ("period_end", models.DateTimeField()),
                ("price_min", models.IntegerField(help_text="Minimum price in period")),
                ("price_max", models.IntegerField(help_text="Maximum price in period")),
                ("price_avg", models.IntegerField(help_text="Average price in period")),
                (
                    "price_median",
                    models.IntegerField(help_text="Median price in period"),
                ),
                (
                    "price_current",
                    models.IntegerField(help_text="Current/latest price"),
                ),
                (
                    "volume_total",
                    models.IntegerField(default=0, help_text="Total volume in period"),
                ),
                (
                    "volume_avg",
                    models.IntegerField(
                        default=0, help_text="Average volume in period"
                    ),
                ),
                (
                    "volume_current",
                    models.IntegerField(default=0, help_text="Current volume"),
                ),
                (
                    "trend_direction",
                    models.CharField(
                        choices=[
                            ("strong_up", "Strong Uptrend"),
                            ("weak_up", "Weak Uptrend"),
                            ("sideways", "Sideways"),
                            ("weak_down", "Weak Downtrend"),
                            ("strong_down", "Strong Downtrend"),
                        ],
                        default="sideways",
                        max_length=20,
                    ),
                ),
                (
                    "volatility_score",
                    models.FloatField(
                        default=0.0, help_text="Price volatility (0.0-1.0)"
                    ),
                ),
                (
                    "momentum_score",
                    models.FloatField(
                        default=0.0, help_text="Price momentum (-1.0 to 1.0)"
                    ),
                ),
                (
                    "volume_momentum",
                    models.FloatField(
                        default=0.0, help_text="Volume momentum (-1.0 to 1.0)"
                    ),
                ),
                (
                    "support_level",
                    models.IntegerField(
                        blank=True, help_text="Support price level", null=True
                    ),
                ),
                (
                    "resistance_level",
                    models.IntegerField(
                        blank=True, help_text="Resistance price level", null=True
                    ),
                ),
                (
                    "pattern_type",
                    models.CharField(
                        choices=[
                            ("breakout_up", "Upward Breakout"),
                            ("breakout_down", "Downward Breakout"),
                            ("bounce_support", "Bounce off Support"),
                            ("reject_resistance", "Rejected at Resistance"),
                            ("range_bound", "Range Bound"),
                            ("trend_reversal", "Trend Reversal"),
                            ("consolidation", "Consolidation"),
                            ("unknown", "Unknown Pattern"),
                        ],
                        default="unknown",
                        max_length=30,
                    ),
                ),
                (
                    "pattern_confidence",
                    models.FloatField(
                        default=0.0,
                        help_text="Pattern recognition confidence (0.0-1.0)",
                    ),
                ),
                ("calculated_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="market_trends",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "market_trends",
            },
        ),
        migrations.CreateModel(
            name="MerchantAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("price_above", "Price Above Threshold"),
                            ("price_below", "Price Below Threshold"),
                            ("volume_spike", "Volume Spike"),
                            ("volatility_high", "High Volatility"),
                            ("trend_reversal", "Trend Reversal"),
                            ("opportunity", "New Opportunity"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "threshold_price",
                    models.IntegerField(
                        blank=True, help_text="Price threshold", null=True
                    ),
                ),
                (
                    "threshold_volume",
                    models.IntegerField(
                        blank=True, help_text="Volume threshold", null=True
                    ),
                ),
                (
                    "threshold_volatility",
                    models.FloatField(
                        blank=True, help_text="Volatility threshold", null=True
                    ),
                ),
                (
                    "message",
                    models.TextField(blank=True, help_text="Custom alert message"),
                ),
                ("notes", models.TextField(blank=True, help_text="User notes")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("triggered", "Triggered"),
                            ("paused", "Paused"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("triggered_at", models.DateTimeField(blank=True, null=True)),
                ("triggered_price", models.IntegerField(blank=True, null=True)),
                ("notify_email", models.BooleanField(default=True)),
                ("notify_browser", models.BooleanField(default=True)),
                ("repeat_notifications", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merchant_alerts",
                        to="items.item",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merchant_alerts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "merchant_alerts",
            },
        ),
        migrations.CreateModel(
            name="MerchantOpportunity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "opportunity_type",
                    models.CharField(
                        choices=[
                            ("flip_quick", "Quick Flip (Minutes)"),
                            ("swing_short", "Short Swing (Hours)"),
                            ("swing_medium", "Medium Swing (Days)"),
                            ("position_long", "Long Position (Weeks)"),
                            ("arbitrage", "Price Arbitrage"),
                            ("pattern_trade", "Pattern Trade"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("conservative", "Conservative (Low Risk)"),
                            ("moderate", "Moderate (Medium Risk)"),
                            ("aggressive", "Aggressive (High Risk)"),
                            ("speculative", "Speculative (Very High Risk)"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "current_price",
                    models.IntegerField(help_text="Current market price"),
                ),
                (
                    "target_buy_price",
                    models.IntegerField(help_text="Recommended buy price"),
                ),
                (
                    "target_sell_price",
                    models.IntegerField(help_text="Target sell price"),
                ),
                (
                    "stop_loss_price",
                    models.IntegerField(
                        blank=True, help_text="Stop loss price", null=True
                    ),
                ),
                (
                    "projected_profit_per_item",
                    models.IntegerField(help_text="Expected profit per item"),
                ),
                (
                    "projected_profit_margin_pct",
                    models.FloatField(help_text="Expected profit margin %"),
                ),
                (
                    "estimated_trade_volume",
                    models.IntegerField(
                        default=1, help_text="Estimated tradeable volume"
                    ),
                ),
                (
                    "total_projected_profit",
                    models.IntegerField(help_text="Total expected profit"),
                ),
                (
                    "risk_score",
                    models.FloatField(default=0.5, help_text="Risk score (0.0-1.0)"),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.5, help_text="Confidence score (0.0-1.0)"
                    ),
                ),
                (
                    "success_probability",
                    models.FloatField(
                        default=0.5, help_text="Success probability (0.0-1.0)"
                    ),
                ),
                (
                    "opportunity_score",
                    models.IntegerField(
                        default=50, help_text="Overall opportunity score (0-100)"
                    ),
                ),
                (
                    "time_sensitivity",
                    models.CharField(
                        choices=[
                            ("immediate", "Act Immediately"),
                            ("urgent", "Act Within Hours"),
                            ("moderate", "Act Within Days"),
                            ("flexible", "Flexible Timing"),
                        ],
                        default="moderate",
                        max_length=20,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When opportunity expires", null=True
                    ),
                ),
                (
                    "reasoning",
                    models.TextField(
                        help_text="AI explanation of why this is an opportunity"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("executed", "Executed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "based_on_trend",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="prices.markettrend",
                    ),
                ),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merchant_opportunities",
                        to="items.item",
                    ),
                ),
            ],
            options={
                "db_table": "merchant_opportunities",
            },
        ),
        migrations.CreateModel(
            name="MerchantPortfolio",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_capital",
                    models.IntegerField(
                        default=0,
                        help_text="Total capital allocated to merchant activities",
                    ),
                ),
                (
                    "available_capital",
                    models.IntegerField(
                        default=0, help_text="Available capital for new positions"
                    ),
                ),
                (
                    "invested_capital",
                    models.IntegerField(
                        default=0, help_text="Capital currently invested in positions"
                    ),
                ),
                ("total_trades", models.IntegerField(default=0)),
                ("winning_trades", models.IntegerField(default=0)),
                ("losing_trades", models.IntegerField(default=0)),
                (
                    "total_profit",
                    models.IntegerField(
                        default=0, help_text="Total profit across all trades"
                    ),
                ),
                (
                    "total_return_pct",
                    models.FloatField(default=0.0, help_text="Total return percentage"),
                ),
                (
                    "max_drawdown",
                    models.IntegerField(default=0, help_text="Maximum loss from peak"),
                ),
                ("average_win", models.IntegerField(default=0)),
                ("average_loss", models.IntegerField(default=0)),
                ("win_rate_pct", models.FloatField(default=0.0)),
                (
                    "max_position_size_pct",
                    models.FloatField(
                        default=10.0, help_text="Max % of capital per position"
                    ),
                ),
                (
                    "risk_per_trade_pct",
                    models.FloatField(default=2.0, help_text="Max risk % per trade"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="merchant_portfolio",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "merchant_portfolios",
            },
        ),
        migrations.CreateModel(
            name="TradingPosition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "position_type",
                    models.CharField(
                        choices=[
                            ("long", "Long Position (Buy to Sell)"),
                            ("short", "Short Position (Sell to Buy)"),
                        ],
                        default="long",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("open", "Open"),
                            ("closed", "Closed"),
                            ("partial", "Partially Closed"),
                            ("stopped", "Stopped Out"),
                        ],
                        default="open",
                        max_length=20,
                    ),
                ),
                (
                    "entry_price",
                    models.IntegerField(
                        help_text="Price at which position was entered"
                    ),
                ),
                (
                    "entry_quantity",
                    models.IntegerField(help_text="Number of items bought/sold"),
                ),
                ("entry_timestamp", models.DateTimeField(auto_now_add=True)),
                ("entry_notes", models.TextField(blank=True)),
                (
                    "exit_price",
                    models.IntegerField(
                        blank=True,
                        help_text="Price at which position was closed",
                        null=True,
                    ),
                ),
                (
                    "exit_quantity",
                    models.IntegerField(
                        blank=True,
                        help_text="Number of items sold/bought back",
                        null=True,
                    ),
                ),
                ("exit_timestamp", models.DateTimeField(blank=True, null=True)),
                ("exit_notes", models.TextField(blank=True)),
                ("stop_loss_price", models.IntegerField(blank=True, null=True)),
                ("target_price", models.IntegerField(blank=True, null=True)),
                (
                    "realized_profit",
                    models.IntegerField(
                        default=0, help_text="Actual profit/loss from closed portion"
                    ),
                ),
                (
                    "unrealized_profit",
                    models.IntegerField(
                        default=0, help_text="Current unrealized profit/loss"
                    ),
                ),
                (
                    "total_profit",
                    models.IntegerField(
                        default=0, help_text="Total profit (realized + unrealized)"
                    ),
                ),
                (
                    "return_pct",
                    models.FloatField(default=0.0, help_text="Return percentage"),
                ),
                (
                    "holding_period_hours",
                    models.IntegerField(
                        default=0, help_text="How long position was held"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_positions",
                        to="items.item",
                    ),
                ),
                (
                    "opportunity",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="prices.merchantopportunity",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trading_positions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "trading_positions",
            },
        ),
        migrations.AddIndex(
            model_name="markettrend",
            index=models.Index(
                fields=["item", "period_type", "-period_end"],
                name="market_tren_item_id_d1ad80_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="markettrend",
            index=models.Index(
                fields=["-calculated_at"], name="market_tren_calcula_a1889e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="markettrend",
            index=models.Index(
                fields=["trend_direction"], name="market_tren_trend_d_d76d3c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="markettrend",
            index=models.Index(
                fields=["pattern_type"], name="market_tren_pattern_4716ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="markettrend",
            index=models.Index(
                fields=["-volatility_score"], name="market_tren_volatil_6aa94e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="markettrend",
            unique_together={("item", "period_type", "period_start")},
        ),
        migrations.AddIndex(
            model_name="merchantalert",
            index=models.Index(
                fields=["user", "status"], name="merchant_al_user_id_12b307_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantalert",
            index=models.Index(
                fields=["item", "status"], name="merchant_al_item_id_2f4697_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantalert",
            index=models.Index(
                fields=["alert_type"], name="merchant_al_alert_t_2dc8dc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantalert",
            index=models.Index(
                fields=["-created_at"], name="merchant_al_created_a16dc0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantopportunity",
            index=models.Index(
                fields=["-opportunity_score"], name="merchant_op_opportu_849db4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantopportunity",
            index=models.Index(
                fields=["status", "-created_at"], name="merchant_op_status_e35510_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantopportunity",
            index=models.Index(
                fields=["opportunity_type"], name="merchant_op_opportu_04cd6e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantopportunity",
            index=models.Index(
                fields=["risk_level"], name="merchant_op_risk_le_b307de_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantopportunity",
            index=models.Index(
                fields=["time_sensitivity"], name="merchant_op_time_se_8762cb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="merchantopportunity",
            index=models.Index(
                fields=["-total_projected_profit"],
                name="merchant_op_total_p_98f862_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="tradingposition",
            index=models.Index(
                fields=["user", "status"], name="trading_pos_user_id_b501e2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tradingposition",
            index=models.Index(
                fields=["item", "status"], name="trading_pos_item_id_69fb14_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tradingposition",
            index=models.Index(
                fields=["-entry_timestamp"], name="trading_pos_entry_t_ff4954_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tradingposition",
            index=models.Index(
                fields=["-total_profit"], name="trading_pos_total_p_c8dd29_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tradingposition",
            index=models.Index(
                fields=["-return_pct"], name="trading_pos_return__c8ecf2_idx"
            ),
        ),
    ]
